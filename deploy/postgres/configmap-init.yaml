apiVersion: v1
kind: ConfigMap
metadata:
  name: pg-init
  namespace: trading
data:
  init.sql: |
    CREATE SCHEMA IF NOT EXISTS app;

    -- Order Table
    CREATE TABLE IF NOT EXISTS app.orders (
      id              UUID PRIMARY KEY,
      client_order_id TEXT UNIQUE NOT NULL,
      symbol          TEXT NOT NULL,
      side            TEXT NOT NULL,          -- BUY / SELL
      qty             NUMERIC(18,8) NOT NULL,
      price           NUMERIC(18,8),
      status          TEXT NOT NULL DEFAULT 'PENDING', -- PENDING/FILLED/CANCELED
      created_at      TIMESTAMPTZ DEFAULT now(),
      updated_at      TIMESTAMPTZ DEFAULT now()
    );

    -- Outbox (EOS CDC Core)
    CREATE TABLE IF NOT EXISTS app.outbox (
      event_id        UUID PRIMARY KEY,
      aggregate_type  TEXT NOT NULL,          -- e.g., 'ORDER'
      aggregate_id    UUID NOT NULL,          -- orders.id
      type            TEXT NOT NULL,          -- ORDER_PLACED/FILLED/CANCELED
      payload         JSONB NOT NULL,
      occurred_at     TIMESTAMPTZ DEFAULT now()
    );

    CREATE INDEX IF NOT EXISTS idx_outbox_time ON app.outbox(occurred_at);

    -- Idempotent Key: Block duplicate orders using client_order_id
    CREATE UNIQUE INDEX IF NOT EXISTS ux_orders_client_order_id ON app.orders(client_order_id);

    -- updated_at trigger (simple)
    CREATE OR REPLACE FUNCTION app.touch_updated_at() RETURNS trigger AS $$
    BEGIN NEW.updated_at = now(); RETURN NEW; END; $$ LANGUAGE plpgsql;
    DO $$
    BEGIN
      IF NOT EXISTS (
        SELECT 1 FROM pg_trigger WHERE tgname = 'orders_touch_update'
      ) THEN
        CREATE TRIGGER orders_touch_update BEFORE UPDATE ON app.orders
          FOR EACH ROW EXECUTE PROCEDURE app.touch_updated_at();
      END IF;
    END$$;
